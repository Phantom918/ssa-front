server:
  port: 9000

spring:
  application:
    name: gateway-app
  datasource:
    username: root
    password: hjXL327918
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/security?characterEncoding=utf8&useSSL=false&serverTimezone=UTC&rewriteBatchedStatements=true
  cloud:
    gateway:
      # 路由规则配置
      routes:
        - id: order_route # 表示路由到 order-app 服务的唯一标识
          uri: lb://order-app # 需要转发服务 ,lb: 使用 nacos 中本地负载均衡策略
          # 断言规则 => 路由匹配规则
          predicates:
            - Path=/order-server/**
            # http://localhost:8088/order-server/order/add 路由到 -> http://localhost:8090/order/add
          filters:
            - StripPrefix=1 # 转发前去掉第一层路径，也就是去掉 http://localhost:8088/order-server
#            - AddRequestHeader=X-Request-color, red #添加请求头
#            - MyAuth=tanlei # 自定义过滤器,必须含有特定头信息
#            - PreserveHostHeader #发送原主机头
        - id: provider_route
          uri: lb://provider-app
          predicates:
            - Path=/provider-server/**
          filters:
            - RewritePath=/provider-server(?<segment>/?.*), $\{segment}
        - id: openapi
          uri: lb://${spring.application.name}
          predicates:
              - Path=/v3/api-docs/**
          filters:
              - RewritePath=/v3/api-docs/(?<path>/?.*), /$\{path}/v3/api-docs
      discovery:
        locator:
          # 是否启动服务自动识别 (使用这个前提是 访问其他服务组件的时候需要使用对应服务的 服务名 和路径来进行，那么上面
          # 的 routes 整个路由规则就不用配置了，自动按照服务名去做断言路由匹配，但是日常使用建议使用 routes 的方式
          enabled: true

    nacos:
      discovery:
        server-addr: 127.0.0.1:8848
    # 配置 sentinel
#    sentinel:
#      transport:
#        dashboard: 127.0.0.1:8080



debug: true
logging:
  level:
    root: info
    org.springframework:
      web: info
      security: info
      security.oauth2: info
      # spring boot 启动的时有大量的 CONDITIONS EVALUATION REPORT 信息，此处设置只打印 error 级别的信息
      boot.autoconfigure: error
      #      web.servlet.mvc.method.annotation.RequestMappingHandlerMapping: trace
      security.web.FilterChainProxy: trace # ???????
      security.web.access.ExceptionTranslationFilter: trace #????

# swagger 配置
springdoc:
#  packages-to-scan: com.tanlei.gateway.controller
#  api-docs:
#    path: /api-docs
#    swagger-ui:
#      path: /swagger-ui.html
  swagger-ui:
    urls: # 配置多个服务的 swagger 文档
      - name: order-server
        url: http://localhost:9000/v3/api-docs/order-server
      - name: provider-server
        url: http://localhost:9000/v3/api-docs/provider-server
      - name: gateway-server
        url: http://localhost:9000/v3/api-docs/gateway-server

